# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAgregarpeliculasaNolan():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_agregarpeliculasaNolan(self):
    # Test name: Agregar peliculas a Nolan
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1505x803 | 
    self.driver.set_window_size(1505, 803)
    # 3 | click | css=#add-movie-btn .w-16 | 
    self.driver.find_element(By.CSS_SELECTOR, "#add-movie-btn .w-16").click()
    # 4 | mouseOver | css=#add-movie-btn .w-16 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "#add-movie-btn .w-16")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 5 | mouseOut | css=#add-movie-btn .w-16 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 6 | click | id=title | 
    self.driver.find_element(By.ID, "title").click()
    # 7 | type | id=title | movie nolan 1
    self.driver.find_element(By.ID, "title").send_keys("movie nolan 1")
    # 8 | type | id=description | test
    self.driver.find_element(By.ID, "description").send_keys("test")
    # 9 | click | id=year | 
    self.driver.find_element(By.ID, "year").click()
    # 10 | type | id=year | 2025
    self.driver.find_element(By.ID, "year").send_keys("2025")
    # 11 | click | id=director_id | 
    self.driver.find_element(By.ID, "director_id").click()
    # 12 | select | id=director_id | label=Cristopher Nolan
    dropdown = self.driver.find_element(By.ID, "director_id")
    dropdown.find_element(By.XPATH, "//option[. = 'Cristopher Nolan']").click()
    # 13 | click | css=.h-min > .flex | 
    self.driver.find_element(By.CSS_SELECTOR, ".h-min > .flex").click()
    # 14 | click | css=#add-movie-btn path | 
    self.driver.find_element(By.CSS_SELECTOR, "#add-movie-btn path").click()
    # 15 | click | id=title | 
    self.driver.find_element(By.ID, "title").click()
    # 16 | type | id=title | movie nolan 2
    self.driver.find_element(By.ID, "title").send_keys("movie nolan 2")
    # 17 | click | id=description | 
    self.driver.find_element(By.ID, "description").click()
    # 18 | type | id=description | test 2
    self.driver.find_element(By.ID, "description").send_keys("test 2")
    # 19 | click | id=year | 
    self.driver.find_element(By.ID, "year").click()
    # 20 | type | id=year | 2026
    self.driver.find_element(By.ID, "year").send_keys("2026")
    # 21 | click | id=director_id | 
    self.driver.find_element(By.ID, "director_id").click()
    # 22 | select | id=director_id | label=Cristopher Nolan
    dropdown = self.driver.find_element(By.ID, "director_id")
    dropdown.find_element(By.XPATH, "//option[. = 'Cristopher Nolan']").click()
    # 23 | click | css=.h-min > .flex | 
    self.driver.find_element(By.CSS_SELECTOR, ".h-min > .flex").click()
  
